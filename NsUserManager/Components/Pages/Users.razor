@page "/users"
@using BlazorBootstrap
@using NsUserManager.Models
@using NsUserManager.Services
@using System.ComponentModel.DataAnnotations
@inject IScimService ScimService

<PageTitle>Users</PageTitle>

<h1>Users Management</h1>

<p>Manage your Netskope users here.</p>

<Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight" />

<ConfirmDialog @ref="dialog" />

<Modal @ref="modal" UseStaticBackdrop="true" CloseOnEscape="false" Title="Add new user">
    <BodyTemplate>
        <EditForm Model="employee" OnValidSubmit="ShowConfirmationDialog">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Email</label>
                <input type="email" class="form-control"
                       @bind="employee.Email" />
                <ValidationMessage For="@(() => employee.Email)" />
            </div>
            <div class="">
                <label class="form-label me-2 mb-0">External Id</label>
                <input type="text" class="form-control"
                       placeholder="Enter External Id"
                       disabled="@(employee.IsExternalIdAutogenerated)"
                       @bind="employee.ExternalId" />
                <ValidationMessage For="@(() => employee.ExternalId)" />
            </div>
            <div class="mb-3 d-flex align-items-center">
                <input type="checkbox" class="form-check-input me-2" @bind="employee.IsExternalIdAutogenerated" />
                <span class="text-muted ms-2">Auto-generate the External Id.</span>
            </div>
            <div class="">
                <label class="form-label me-2 mb-0">Username</label>
                <input type="text" class="form-control"
                       placeholder="Enter Username"
                       disabled="@(employee.IsUsernameAutogenerated)"
                       @bind="employee.UserName" />
                <ValidationMessage For="@(() => employee.UserName)" />
            </div>
            <div class="mb-3 d-flex align-items-center">
                <input type="checkbox" class="form-check-input me-2" @bind="employee.IsUsernameAutogenerated" />
                <span class="text-muted ms-2">Auto-generate the Username.</span>
            </div>
            <div class="mb-3">
                <label class="form-label">Given Name</label>
                <input type="text" class="form-control"
                       @bind="employee.GivenName" />
                <ValidationMessage For="@(() => employee.GivenName)" />
            </div>
            <div class="mb-3">
                <label class="form-label">Family Name</label>
                <input type="text" class="form-control"
                       @bind="employee.FamilyName" />
                <ValidationMessage For="@(() => employee.FamilyName)" />
            </div>
            <div class="d-flex justify-content-end">
                <button type="submit" class="btn btn-primary">Save</button>
            </div>
        </EditForm>
    </BodyTemplate>
</Modal>

<Modal @ref="groupModal" UseStaticBackdrop="true" CloseOnEscape="false" Title="Manage Group Membership">
    <BodyTemplate>
        <EditForm Model="this" OnValidSubmit="HandleGroupMembership">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Select Group</label>
                <select class="form-select" @bind="selectedGroupId">
                    <option value="">-- Select a Group --</option>
                    @foreach (var group in _groups)
                    {
                        <option value="@group.Id">@group.DisplayName</option>
                    }
                </select>
                <ValidationMessage For="@(() => selectedGroupId)" />
            </div>

            <div class="d-flex justify-content-end">
                <button type="submit" class="btn btn-primary">Confirm</button>
            </div>
        </EditForm>
    </BodyTemplate>
</Modal>
<div class="mb-3">
    <button class="btn btn-primary" @onclick="ShowCreateDialog">Add New User</button>
</div>

@if (isLoadingUsers)
{
    <p>Loading users...</p>
}
else if (_users == null)
{
    <p class="text-danger">Failed to load users.</p>
}
else if (_users.Count == 0)
{
    <p class="text-primary">No users available</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Netskope Id</th>
                <th>Username</th>
                <th>Email</th>
                <th>ExternalId</th>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in _users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.UserName</td>
                    <td>@user.Emails.FirstOrDefault()?.Value</td>
                    <td>@user.ExternalId</td>
                    <td>@(user.Name?.GivenName + " " + user.Name?.FamilyName)</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => ShowGroupModal(user, true)">Add to Group</button>
                        <button class="btn btn-sm btn-secondary" @onclick="() => ShowGroupModal(user, false)">Remove from Group</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(user)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private ConfirmDialog dialog = default!;
    private Modal modal = default!;
    private Modal groupModal = default!;
    private AddScimUser employee = new AddScimUser();
    private List<ScimUser>? _users;
    private List<ScimGroup>? _groups;
    private List<ToastMessage> messages = new List<ToastMessage>();
    private ScimUser? selectedUser;
    private string? selectedGroupId;
    private bool isAddingToGroup;
    private bool isLoadingUsers = true; // Track loading state for users

    private async Task ShowGroupModal(ScimUser user, bool isAdding)
    {
        selectedUser = user;
        isAddingToGroup = isAdding;
        selectedGroupId = null;
        await groupModal.ShowAsync();
    }

    private async Task HandleGroupMembership()
    {
        if (string.IsNullOrEmpty(selectedGroupId) || selectedUser == null)
        {
            messages.Add(new ToastMessage
            {
                Message = "Please select a group.",
                Type = ToastType.Warning
            });
            return;
        }

        var confirmation = await dialog.ShowAsync(
            title: isAddingToGroup ? "Add User to Group" : "Remove User from Group",
            message1: $"Are you sure you want to {(isAddingToGroup ? "add" : "remove")} {selectedUser.UserName} {(isAddingToGroup ? "to" : "from")} the selected group?",
            message2: "");

        if (confirmation)
        {
            try
            {
                if (isAddingToGroup)
                {
                    await ScimService.PatchGroupMembersAsync(
                        selectedGroupId,
                        new List<ScimGroupMember> { new() { Value = selectedUser.Id, Display = selectedUser.UserName } },
                        new List<ScimGroupMember>());
                }
                else
                {
                    await ScimService.PatchGroupMembersAsync(
                        selectedGroupId,
                        new List<ScimGroupMember>(),
                        new List<ScimGroupMember> { new() { Value = selectedUser.Id } });
                }

                messages.Add(new ToastMessage
                {
                    Message = $"User successfully {(isAddingToGroup ? "added to" : "removed from")} the group.",
                    Type = ToastType.Success
                });
            }
            catch (Exception ex)
            {
                messages.Add(new ToastMessage
                {
                    Message = $"Error: {ex.Message}",
                    Type = ToastType.Danger
                });
            }
            finally
            {
                await groupModal.HideAsync();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        await LoadGroups();
    }

    private async Task LoadUsers()
    {
        isLoadingUsers = true; // Set loading state to true
        try
        {
            _users = await ScimService.GetUsersAsync();
        }
        catch (Exception ex)
        {
            messages.Add(new ToastMessage
            {
                Message = "Failed to load users. Please try again later.",
                Type = ToastType.Danger
            });
        }
        finally
        {
            isLoadingUsers = false; // Set loading state to false
        }
    }

    private async Task LoadGroups()
    {
        try
        {
            _groups = await ScimService.GetGroupsAsync();
        }
        catch (Exception ex)
        {
            messages.Add(new ToastMessage
            {
                Message = $"Error loading groups: {ex.Message}",
                Type = ToastType.Danger
            });
        }
    }

    private async Task ShowCreateDialog()
    {
        employee = new AddScimUser();
        await modal.ShowAsync();
    }

    private async Task ShowConfirmationDialog()
    {
        var confirmation = await dialog.ShowAsync(
            title: "Configuration required",
            message1: "Are you sure you want to add a new user?",
            message2: "");

        if (confirmation)
        {
            await HandleValidSubmit();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var createdUser = await ScimService.CreateUserAsync(employee);

            messages.Add(new ToastMessage
            {
                Message = "User created successfully.",
                Type = ToastType.Success
            });

            await LoadUsers(); // Refresh the user list
            await modal.HideAsync();
        }
        catch (Exception ex)
        {
            messages.Add(new ToastMessage
            {
                Message = $"Error creating user: {ex.Message}",
                Type = ToastType.Danger
            });
        }
    }

    private async Task DeleteUser(ScimUser user)
    {
        var confirmation = await dialog.ShowAsync(
            title: "Configuration required",
            message1: "Are you sure you want to delete this user?",
            message2: $"{user.Emails.FirstOrDefault()?.Value}");

        if (confirmation)
        {
            try
            {
                await ScimService.DeleteUserAsync(user.Id);
                await LoadUsers();

                messages.Add(new ToastMessage
                {
                    Message = "User deleted successfully.",
                    Type = ToastType.Success
                });

            }
            catch (Exception ex)
            {
                messages.Add(new ToastMessage
                {
                    Message = $"Error deleting user: {ex.Message}",
                    Type = ToastType.Danger
                });
            }

        }
    }

    /*private async Task ToggleUserStatus(ScimUser user)
    {
        var confirmation = await dialog.ShowAsync(
            title: "Configuration required",
            message1: $"Are you sure you want to {(user.Active ? "deactivate" : "activate")} this user?",
            message2: $"{user.Emails.FirstOrDefault()?.Value}");

        if (confirmation)
        {
            try
            {
                user.Active = !user.Active;
                await ScimService.UpdateUserStateAsync(user);

                messages.Add(new ToastMessage
                {
                    Message = $"User successfully {(user.Active ? "activated" : "deactivated")}.",
                    Type = ToastType.Success
                });

                await LoadUsers(); // Refresh the user list
            }
            catch (Exception ex)
            {
                messages.Add(new ToastMessage
                {
                    Message = $"Error updating user status: {ex.Message}",
                    Type = ToastType.Danger
                });
            }
        }
    }*/
}