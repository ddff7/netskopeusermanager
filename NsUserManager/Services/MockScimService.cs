using NsUserManager.Models;

namespace NsUserManager.Services;

public class MockScimService : IScimService
{
    private readonly List<ScimUser> _users = new();
    private readonly List<ScimGroup> _groups = new();
    private int _nextUserId = 1;
    private int _nextGroupId = 1;
    private readonly string _externalIdPrefix;

    public MockScimService(IConfiguration configuration)
    {
        _externalIdPrefix = configuration["Netskope:ExternalIdPrefix"] ?? "netskope-manager-";

        // Add some sample data
        _users.Add(new ScimUser
        {
            Id = "1",
            ExternalId = $"{_externalIdPrefix}user-1",
            UserName = "john.doe",
            Active = true,
            Name = new Name { GivenName = "John", FamilyName = "Doe" },
            Emails = new List<Email> { new() { Value = "john.doe@example.com", Primary = true } }
        });

        _users.Add(new ScimUser
        {
            Id = "2",
            ExternalId = $"{_externalIdPrefix}user-2",
            UserName = "jane.smith",
            Active = true,
            Name = new Name { GivenName = "Jane", FamilyName = "Smith" },
            Emails = new List<Email> { new() { Value = "jane.smith@example.com", Primary = true } }
        });

        _groups.Add(new ScimGroup
        {
            Id = "1",
            ExternalId = $"{_externalIdPrefix}group-1",
            DisplayName = "Administrators",
            Members = new List<ScimGroupMember>
            {
                new() { Value = "1", Display = "John Doe" }
            }
        });

        _groups.Add(new ScimGroup
        {
            Id = "2",
            ExternalId = $"{_externalIdPrefix}group-2",
            DisplayName = "Users",
            Members = new List<ScimGroupMember>
            {
                new() { Value = "1", Display = "John Doe" },
                new() { Value = "2", Display = "Jane Smith" }
            }
        });
    }

    // User operations
    public Task<List<ScimUser>> GetUsersAsync()
    {
        return Task.FromResult(_users.ToList());
    }

    public Task<ScimUser?> GetUserAsync(string id)
    {
        return Task.FromResult(_users.FirstOrDefault(u => u.Id == id));
    }

    public Task<ScimUser> CreateUserAsync(AddScimUser user)
    {
        var u = new ScimUser
        {
            Id = _nextUserId.ToString(),
            Active = user.Active,
            Name = new Name
            {
                GivenName = user.GivenName,
                FamilyName = user.FamilyName
            },
            Emails = new List<Email>
            {
                new Email { Value = user.Email, Primary = true }
            },
            Groups = new List<Group>(),
            UserName = user.UserName,
            ExternalId = user.ExternalId
        };
        if (user.IsUsernameAutogenerated)
            u.UserName = user.Email;
        if (user.IsExternalIdAutogenerated)
            u.ExternalId = $"{_externalIdPrefix}user-{_nextUserId}";
        
        _nextUserId++;
        _users.Add(u);
        return Task.FromResult(u);
    }

    public Task<ScimUser> UpdateUserAsync(string id, ScimUser user)
    {
        var existingUser = _users.FirstOrDefault(u => u.Id == id);
        if (existingUser == null)
            throw new KeyNotFoundException($"User with ID {id} not found");

        existingUser.UserName = user.UserName;
        existingUser.Active = user.Active;
        existingUser.Name = user.Name;
        existingUser.Emails = user.Emails;
        existingUser.Groups = user.Groups;
        // Preserve the external ID

        return Task.FromResult(existingUser);
    }

    public Task DeleteUserAsync(string id)
    {
        var user = _users.FirstOrDefault(u => u.Id == id);
        if (user != null)
        {
            _users.Remove(user);
            // Remove user from all groups
            foreach (var group in _groups)
            {
                group.Members.RemoveAll(m => m.Value == id);
            }
        }
        return Task.CompletedTask;
    }

    // Group operations
    public Task<List<ScimGroup>> GetGroupsAsync()
    {
        return Task.FromResult(_groups.ToList());
    }

    public Task<ScimGroup?> GetGroupAsync(string id)
    {
        return Task.FromResult(_groups.FirstOrDefault(g => g.Id == id));
    }

    public Task<ScimGroup> CreateGroupAsync(AddScimGroup group)
    {
        var tmp = new ScimGroup
        {
            DisplayName = group.DisplayName,
            Members = new List<ScimGroupMember>(),
            Id = _nextGroupId.ToString(),
            ExternalId = $"{_externalIdPrefix}group-{_nextGroupId}"
        };
        _nextGroupId++;
        _groups.Add(tmp);
        return Task.FromResult(tmp);
    }

    public Task<ScimGroup> UpdateGroupAsync(string id, ScimGroup group)
    {
        var existingGroup = _groups.FirstOrDefault(g => g.Id == id);
        if (existingGroup == null)
            throw new KeyNotFoundException($"Group with ID {id} not found");

        existingGroup.DisplayName = group.DisplayName;
        existingGroup.Members = group.Members;
        // Preserve the external ID

        return Task.FromResult(existingGroup);
    }

    public Task DeleteGroupAsync(string id)
    {
        var group = _groups.FirstOrDefault(g => g.Id == id);
        if (group != null)
        {
            _groups.Remove(group);
            // Remove group from all users
            foreach (var user in _users)
            {
                user.Groups.RemoveAll(g => g.Value == id);
            }
        }
        return Task.CompletedTask;
    }

    public Task PatchGroupMembersAsync(string groupId, List<ScimGroupMember> membersToAdd, List<ScimGroupMember> membersToRemove)
    {
        return Task.CompletedTask;
    }

    public Task UpdateUserStateAsync(ScimUser user)
    {
        throw new NotImplementedException();
    }
} 