using NsUserManager.Models;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace NsUserManager.Services;

public class ScimService : IScimService
{
    private readonly HttpClient _httpClient;
    private readonly IConfiguration _configuration;
    private readonly string _baseUrl;
    private readonly string _apiToken;
    private readonly string _externalIdPrefix;

    public ScimService(HttpClient httpClient, IConfiguration configuration)
    {
        _httpClient = httpClient;
        _configuration = configuration;
        _baseUrl = _configuration["Netskope:ScimBaseUrl"] ?? throw new ArgumentNullException("Netskope:ScimBaseUrl");
        _apiToken = _configuration["Netskope:ApiToken"] ?? throw new ArgumentNullException("Netskope:ApiToken");
        _externalIdPrefix = _configuration["Netskope:ExternalIdPrefix"] ?? throw new ArgumentNullException("Netskope:ExternalIdPrefix");

        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _apiToken);
        _httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
    }

    public async Task<List<ScimUser>> GetUsersAsync()
    {
        var allUsers = new List<ScimUser>();
        int startIndex = 1;
        int count = 100; // Adjust the count based on the API's maximum allowed value

        while (true)
        {
            var response = await _httpClient.GetAsync($"{_baseUrl}/Users?startIndex={startIndex}&count={count}");
            response.EnsureSuccessStatusCode();

            var content = await response.Content.ReadAsStringAsync();
            var result = JsonSerializer.Deserialize<ScimResponse<ScimUser>>(content);

            if (result?.Resources == null || !result.Resources.Any())
            {
                break; // No more results
            }

            allUsers.AddRange(result.Resources.Where(u => u.ExternalId?.StartsWith(_externalIdPrefix) == true));

            // Check if we've fetched all results
            if (startIndex + count > result.TotalResults)
            {
                break;
            }

            startIndex += count; // Move to the next page
        }

        return allUsers;
    }

    /*public async Task<ScimUser?> GetUserAsync(string id)
    {
        var response = await _httpClient.GetAsync($"{_baseUrl}/Users/{id}");
        if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            return null;
            
        response.EnsureSuccessStatusCode();
        var content = await response.Content.ReadAsStringAsync();
        var user = JsonSerializer.Deserialize<ScimUser>(content);
        return user?.ExternalId?.StartsWith(_externalIdPrefix) == true ? user : null;
    }*/

    public async Task<ScimUser> CreateUserAsync(AddScimUser user)
    {
        var rawJsonPayload = new
        {
            schemas = new[] { "urn:ietf:params:scim:schemas:core:2.0:User",
            "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User",
            "urn:ietf:params:scim:schemas:extension:tenant:2.0:User" },
            meta = new { resourceType = "User" },
            active = true,
            name = new
            {
                familyName = user.FamilyName,
                givenName = user.GivenName
            },
            emails = new[]
            {
                new
                {
                    value = user.Email,
                    primary = true
                }
            },
            externalId = user.IsExternalIdAutogenerated ? $"{_externalIdPrefix}{user.Email}" : $"{_externalIdPrefix}{user.ExternalId}",
            userName = user.IsUsernameAutogenerated ? user.Email : user.UserName
        };

        var content = new StringContent(
            JsonSerializer.Serialize(rawJsonPayload),
            Encoding.UTF8,
            "application/scim+json");

        var response = await _httpClient.PostAsync($"{_baseUrl}/Users", content);
        response.EnsureSuccessStatusCode();

        var responseContent = await response.Content.ReadAsStringAsync();
        return JsonSerializer.Deserialize<ScimUser>(responseContent)
            ?? throw new Exception("Failed to deserialize created user");
    }

    /*public async Task<ScimUser> UpdateUserAsync(string id, ScimUser user)
    {
        // Ensure we're only updating our managed users
        var existingUser = await GetUserAsync(id);
        if (existingUser == null)
            throw new KeyNotFoundException($"User with ID {id} not found or not managed by this application");

        user.ExternalId = existingUser.ExternalId; // Preserve the external ID
        var content = new StringContent(
            JsonSerializer.Serialize(user),
            Encoding.UTF8,
            "application/json");

        var response = await _httpClient.PutAsync($"{_baseUrl}/Users/{id}", content);
        response.EnsureSuccessStatusCode();
        
        var responseContent = await response.Content.ReadAsStringAsync();
        return JsonSerializer.Deserialize<ScimUser>(responseContent) 
            ?? throw new Exception("Failed to deserialize updated user");
    }*/

    public async Task DeleteUserAsync(string id)
    {
        // Ensure we're only deleting our managed users
        /*var existingUser = await GetUserAsync(id);
        if (existingUser == null)
            throw new KeyNotFoundException($"User with ID {id} not found or not managed by this application");*/

        var response = await _httpClient.DeleteAsync($"{_baseUrl}/Users/{id}");
        response.EnsureSuccessStatusCode();
    }

    // Group management
    public async Task<List<ScimGroup>> GetGroupsAsync()
    {
        var allGroups = new List<ScimGroup>();
        int startIndex = 1;
        int count = 100; // Adjust the count based on the API's maximum allowed value

        while (true)
        {
            var response = await _httpClient.GetAsync($"{_baseUrl}/Groups?startIndex={startIndex}&count={count}");
            response.EnsureSuccessStatusCode();

            var content = await response.Content.ReadAsStringAsync();
            var result = JsonSerializer.Deserialize<ScimResponse<ScimGroup>>(content);

            if (result?.Resources == null || !result.Resources.Any())
            {
                break; // No more results
            }

            allGroups.AddRange(result.Resources.Where(g => g.ExternalId?.StartsWith(_externalIdPrefix) == true));

            // Check if we've fetched all results
            if (startIndex + count > result.TotalResults)
            {
                break;
            }

            startIndex += count; // Move to the next page
        }

        return allGroups;
    }

    /*public async Task<ScimGroup?> GetGroupAsync(string id)
    {
        var response = await _httpClient.GetAsync($"{_baseUrl}/Groups/{id}");
        if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            return null;
            
        response.EnsureSuccessStatusCode();
        var content = await response.Content.ReadAsStringAsync();
        var group = JsonSerializer.Deserialize<ScimGroup>(content);
        return group?.ExternalId?.StartsWith(_externalIdPrefix) == true ? group : null;
    }*/

    public async Task<ScimGroup> CreateGroupAsync(AddScimGroup group)
    {
        var rawJsonPayload = new
        {
            schemas = new[] { "urn:ietf:params:scim:schemas:core:2.0:Group" },
            meta = new { resourceType = "Group" },
            displayName = group.DisplayName,
            externalId = $"{_externalIdPrefix}{group.DisplayName}"
        };

        var content = new StringContent(
            JsonSerializer.Serialize(rawJsonPayload),
            Encoding.UTF8,
            "application/scim+json");

        var response = await _httpClient.PostAsync($"{_baseUrl}/Groups", content);
        response.EnsureSuccessStatusCode();

        var responseContent = await response.Content.ReadAsStringAsync();
        return JsonSerializer.Deserialize<ScimGroup>(responseContent)
            ?? throw new Exception("Failed to deserialize created group");
    }

    /*public async Task<ScimGroup> UpdateGroupAsync(string id, ScimGroup group)
    {
        // Ensure we're only updating our managed groups
        var existingGroup = await GetGroupAsync(id);
        if (existingGroup == null)
            throw new KeyNotFoundException($"Group with ID {id} not found or not managed by this application");

        group.ExternalId = existingGroup.ExternalId; // Preserve the external ID
        var content = new StringContent(
            JsonSerializer.Serialize(group),
            Encoding.UTF8,
            "application/json");

        var response = await _httpClient.PutAsync($"{_baseUrl}/Groups/{id}", content);
        response.EnsureSuccessStatusCode();
       
        var responseContent = await response.Content.ReadAsStringAsync();
        return JsonSerializer.Deserialize<ScimGroup>(responseContent) 
            ?? throw new Exception("Failed to deserialize updated group");
    }*/

    public async Task DeleteGroupAsync(string id)
    {
        // Ensure we're only deleting our managed groups
        /*var existingGroup = await GetGroupAsync(id);
        if (existingGroup == null)
            throw new KeyNotFoundException($"Group with ID {id} not found or not managed by this application");*/

        var response = await _httpClient.DeleteAsync($"{_baseUrl}/Groups/{id}");
        response.EnsureSuccessStatusCode();
    }

    public async Task PatchGroupMembersAsync(string groupId, List<ScimGroupMember> membersToAdd, List<ScimGroupMember> membersToRemove)
    {
        // Construct the PATCH payload
        var patchPayload = new
        {
            schemas = new[] { "urn:ietf:params:scim:api:messages:2.0:PatchOp" },
            Operations = new List<object>()
        };

        if (membersToAdd.Any())
        {
            patchPayload.Operations.Add(new
            {
                op = "add",
                path = "members",
                value = membersToAdd.Select(m => new { value = m.Value, display = m.Display })
            });
        }

        if (membersToRemove.Any())
        {
            patchPayload.Operations.Add(new
            {
                op = "remove",
                path = "members",
                value = membersToRemove.Select(m => new { value = m.Value })
            });
        }

        // Serialize the payload
        var content = new StringContent(
            JsonSerializer.Serialize(patchPayload),
            Encoding.UTF8,
            "application/json");

        // Send the PATCH request
        var response = await _httpClient.PatchAsync($"{_baseUrl}/Groups/{groupId}", content);
        response.EnsureSuccessStatusCode();
    }

    //disable is like deleting
    public async Task UpdateUserStateAsync(ScimUser user)
    {
        var rawJsonPayload = new
        {
            Operations = new[] {
                new {
                    op = "replace",
                    path = "active",
                    value = new {
                        value = !user.Active
                    }
                }
            },
            schemas = new[] {
                "urn:ietf:params:scim:api:messages:2.0:PatchOp"
            }
        };

        var content = new StringContent(
            JsonSerializer.Serialize(rawJsonPayload),
            Encoding.UTF8,
            "application/scim+json");

        var response = await _httpClient.PatchAsync($"{_baseUrl}/Users/{user.Id}", content);
        response.EnsureSuccessStatusCode();
    }

    public Task<ScimUser?> GetUserAsync(string id)
    {
        throw new NotImplementedException();
    }

    public Task<ScimUser> UpdateUserAsync(string id, ScimUser user)
    {
        throw new NotImplementedException();
    }

    public Task<ScimGroup?> GetGroupAsync(string id)
    {
        throw new NotImplementedException();
    }

    public Task<ScimGroup> UpdateGroupAsync(string id, ScimGroup group)
    {
        throw new NotImplementedException();
    }
}

public class ScimResponse<T>
{
    [JsonPropertyName("Resources")]
    public List<T> Resources { get; set; } = new();

    [JsonPropertyName("totalResults")]
    public int TotalResults { get; set; }

    [JsonPropertyName("startIndex")]
    public int StartIndex { get; set; }

    [JsonPropertyName("itemsPerPage")]
    public int ItemsPerPage { get; set; }
}